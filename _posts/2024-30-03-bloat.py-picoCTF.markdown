---
title: "bloat.py | picoCTF |CTF Writeups"
date: 2024-04-07 20:14 +0300
categories: [CTF Writeups]
tags: [Reverse Engineering, picoCTF2022]
---

# bloat.py | Instruction and Information

![Information and Instruction](../assets/images/RE/bloat.py/ins.png)

<h5>AUTHOR: LT 'SYREAL' JONES</h5>

<h4>Description</h4>
Can you get the flag?
Run this [Python program](https://artifacts.picoctf.net/c/104/bloat.flag.py) in the same directory as this [encrypted flag](https://artifacts.picoctf.net/c/104/flag.txt.enc).

# bloat.py | Guide
After downloading two files from the instruction, and concatenate the python file, it look like a python program script that performing some kind of password authentication followed by decryption of a file using a simple XOR cipher with a fixed key.

![concatenating bloat.py](../assets/images/RE/bloat.py/cat_bloat.png)

After rewriting that code, with the simple code below,

    a = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \
                "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ "

    arg432param = a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]
    print(arg432param)

    arg432paramfalse = a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\
    a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\
    a[81]+a[68]+a[66]+a[83]
    print(arg432paramfalse)

    arg111retsecargs = a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\
    a[75]+a[72]+a[78]+a[77]
    print(arg111retsecargs)

    arg232retval = a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\
    a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\
    a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\
    a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94]
    print(arg232retval)

    arg112print = a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\
    a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\
    a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25]
    print(arg112print)

Output of the above python script:

>happychance<br>
That password is incorrect<br>
rapscallion<br>
Please enter correct password for flag:<br>
>Welcome back... your flag, user:

we can rewrite thie code, which is to make more readable, like this:

    import sys
    a = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \
                "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ "

    def arg133(arg432):
      if arg432 == "happychance":
        return True
      else:
        print("That password is incorrect")
        sys.exit(0)
        return False

    def arg111(arg444):
      return arg122(arg444.decode(), "rapscallion")

    def arg232():
      return input("Please enter correct password for flag:")

    def arg132():
      return open('flag.txt.enc', 'rb').read()

    def arg112():
      print("Welcome back... your flag, user:")

    def arg122(arg432, arg423):
        arg433 = arg423
        i = 0
        while len(arg433) < len(arg432):
            arg433 = arg433 + arg423[i]
            i = (i + 1) % len(arg423)
        return "".join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)])

    arg444 = arg132()
    arg432 = arg232()
    arg133(arg432)
    arg112()
    arg423 = arg111(arg444)
    print(arg423)
    sys.exit(0)


If we run the python program, it will prompt the password which we can input "happychance",  and get our flag.

![get flagusing input password](../assets/images/RE/bloat.py/flag.png)

Or, if we want to have some fun, we can reverse the code  (like this code below), and run  our reversed-code  program, and get our flag

    import sys
    a = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+ \
                "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ "

    def arg122(arg432, arg423):
        arg433 = arg423
        i = 0
        while len(arg433) < len(arg432):
            arg433 = arg433 + arg423[i]
            i = (i + 1) % len(arg423)
        return "".join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)])

    def arg111(arg444):
      return arg122(arg444.decode(), "rapscallion")

    def arg132():
      return open('flag.txt.enc', 'rb').read()

    arg444 = arg132()
    arg423 = arg111(arg444)
    print(arg423)


and if we run the code above, we can get this following result, which is still get our flag:

![flag result using reverse code](../assets/images/RE/bloat.py/res_oks.png)

>picoCTF{d###fu#c47#0n_##w_1##a4f#9}

And boom, *voila!*, you have add 200 points  for  your picoGYM Score

